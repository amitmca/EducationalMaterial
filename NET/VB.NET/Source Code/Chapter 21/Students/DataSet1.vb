'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tablestudentstable As studentstableDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("studentstable")) Is Nothing) Then
                Me.Tables.Add(New studentstableDataTable(ds.Tables("studentstable")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property studentstable As studentstableDataTable
        Get
            Return Me.tablestudentstable
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("studentstable")) Is Nothing) Then
            Me.Tables.Add(New studentstableDataTable(ds.Tables("studentstable")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablestudentstable = CType(Me.Tables("studentstable"),studentstableDataTable)
        If (Not (Me.tablestudentstable) Is Nothing) Then
            Me.tablestudentstable.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablestudentstable = New studentstableDataTable
        Me.Tables.Add(Me.tablestudentstable)
    End Sub
    
    Private Function ShouldSerializestudentstable() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub studentstableRowChangeEventHandler(ByVal sender As Object, ByVal e As studentstableRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class studentstableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGrade As DataColumn
        
        Private columnStudent_name As DataColumn
        
        Private columnstudentsid As DataColumn
        
        Friend Sub New()
            MyBase.New("studentstable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GradeColumn As DataColumn
            Get
                Return Me.columnGrade
            End Get
        End Property
        
        Friend ReadOnly Property Student_nameColumn As DataColumn
            Get
                Return Me.columnStudent_name
            End Get
        End Property
        
        Friend ReadOnly Property studentsidColumn As DataColumn
            Get
                Return Me.columnstudentsid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As studentstableRow
            Get
                Return CType(Me.Rows(index),studentstableRow)
            End Get
        End Property
        
        Public Event studentstableRowChanged As studentstableRowChangeEventHandler
        
        Public Event studentstableRowChanging As studentstableRowChangeEventHandler
        
        Public Event studentstableRowDeleted As studentstableRowChangeEventHandler
        
        Public Event studentstableRowDeleting As studentstableRowChangeEventHandler
        
        Public Overloads Sub AddstudentstableRow(ByVal row As studentstableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddstudentstableRow(ByVal Grade As String, ByVal Student_name As String, ByVal studentsid As Integer) As studentstableRow
            Dim rowstudentstableRow As studentstableRow = CType(Me.NewRow,studentstableRow)
            rowstudentstableRow.ItemArray = New Object() {Grade, Student_name, studentsid}
            Me.Rows.Add(rowstudentstableRow)
            Return rowstudentstableRow
        End Function
        
        Public Function FindBystudentsid(ByVal studentsid As Integer) As studentstableRow
            Return CType(Me.Rows.Find(New Object() {studentsid}),studentstableRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As studentstableDataTable = CType(MyBase.Clone,studentstableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New studentstableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGrade = Me.Columns("Grade")
            Me.columnStudent_name = Me.Columns("Student_name")
            Me.columnstudentsid = Me.Columns("studentsid")
        End Sub
        
        Private Sub InitClass()
            Me.columnGrade = New DataColumn("Grade", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrade)
            Me.columnStudent_name = New DataColumn("Student_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStudent_name)
            Me.columnstudentsid = New DataColumn("studentsid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstudentsid)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnstudentsid}, true))
            Me.columnstudentsid.AllowDBNull = false
            Me.columnstudentsid.Unique = true
        End Sub
        
        Public Function NewstudentstableRow() As studentstableRow
            Return CType(Me.NewRow,studentstableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New studentstableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(studentstableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.studentstableRowChangedEvent) Is Nothing) Then
                RaiseEvent studentstableRowChanged(Me, New studentstableRowChangeEvent(CType(e.Row,studentstableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.studentstableRowChangingEvent) Is Nothing) Then
                RaiseEvent studentstableRowChanging(Me, New studentstableRowChangeEvent(CType(e.Row,studentstableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.studentstableRowDeletedEvent) Is Nothing) Then
                RaiseEvent studentstableRowDeleted(Me, New studentstableRowChangeEvent(CType(e.Row,studentstableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.studentstableRowDeletingEvent) Is Nothing) Then
                RaiseEvent studentstableRowDeleting(Me, New studentstableRowChangeEvent(CType(e.Row,studentstableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovestudentstableRow(ByVal row As studentstableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class studentstableRow
        Inherits DataRow
        
        Private tablestudentstable As studentstableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablestudentstable = CType(Me.Table,studentstableDataTable)
        End Sub
        
        Public Property Grade As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentstable.GradeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentstable.GradeColumn) = value
            End Set
        End Property
        
        Public Property Student_name As String
            Get
                Try 
                    Return CType(Me(Me.tablestudentstable.Student_nameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudentstable.Student_nameColumn) = value
            End Set
        End Property
        
        Public Property studentsid As Integer
            Get
                Return CType(Me(Me.tablestudentstable.studentsidColumn),Integer)
            End Get
            Set
                Me(Me.tablestudentstable.studentsidColumn) = value
            End Set
        End Property
        
        Public Function IsGradeNull() As Boolean
            Return Me.IsNull(Me.tablestudentstable.GradeColumn)
        End Function
        
        Public Sub SetGradeNull()
            Me(Me.tablestudentstable.GradeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStudent_nameNull() As Boolean
            Return Me.IsNull(Me.tablestudentstable.Student_nameColumn)
        End Function
        
        Public Sub SetStudent_nameNull()
            Me(Me.tablestudentstable.Student_nameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class studentstableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As studentstableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As studentstableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As studentstableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
